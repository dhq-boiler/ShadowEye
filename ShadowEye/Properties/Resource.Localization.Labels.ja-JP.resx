<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cancel" xml:space="preserve">
    <value>キャンセル</value>
  </data>
  <data name="NotSupportFormatError" xml:space="preserve">
    <value>非対応フォーマット エラー</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="SelectCameraDialogText" xml:space="preserve">
    <value>カメラデバイスを選択：</value>
  </data>
  <data name="SelectCameraDialogTitle" xml:space="preserve">
    <value>カメラデバイスの選択</value>
  </data>
  <data name="SubtractionDialogTitle" xml:space="preserve">
    <value>減算</value>
  </data>
  <data name="SubWorkbenchHistogramAverage" xml:space="preserve">
    <value>平均</value>
  </data>
  <data name="SubWorkbenchHistogramHeight" xml:space="preserve">
    <value>高さ</value>
  </data>
  <data name="SubWorkbenchHistogramMedian" xml:space="preserve">
    <value>中央値</value>
  </data>
  <data name="SubWorkbenchHistogramPixels" xml:space="preserve">
    <value>全ピクセル</value>
  </data>
  <data name="SubWorkbenchHistogramStandardDeviation" xml:space="preserve">
    <value>標準偏差</value>
  </data>
  <data name="SubWorkbenchHistogramTabHeader" xml:space="preserve">
    <value>ヒストグラム</value>
  </data>
  <data name="SubWorkbenchHistogramType" xml:space="preserve">
    <value>タイプ</value>
  </data>
  <data name="SubWorkbenchHistogramWidth" xml:space="preserve">
    <value>幅</value>
  </data>
  <data name="ComputeButton" xml:space="preserve">
    <value>計算</value>
  </data>
  <data name="ImageInfoBits" xml:space="preserve">
    <value>ビット深度</value>
  </data>
  <data name="ImageInfoChannels" xml:space="preserve">
    <value>チャンネル数</value>
  </data>
  <data name="ImageInfoColorMode" xml:space="preserve">
    <value>カラーモード</value>
  </data>
  <data name="ImageInfoTitle" xml:space="preserve">
    <value>画像</value>
  </data>
  <data name="ChannelIntegrationDialogTitle" xml:space="preserve">
    <value>チャンネルの統合</value>
  </data>
  <data name="ChannelIntegrationNormalize" xml:space="preserve">
    <value>チャンネル統合後の最大値をビット深度の最大になるように正規化する</value>
  </data>
  <data name="TargetImage" xml:space="preserve">
    <value>対象画像</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>オプション</value>
  </data>
  <data name="SubWorkbenchHistogramFps" xml:space="preserve">
    <value>FPS</value>
  </data>
  <data name="ThresholdingMethod" xml:space="preserve">
    <value>閾値化の種類:</value>
  </data>
  <data name="ChannelIntegrationOutputType" xml:space="preserve">
    <value>MatType 出力形式:</value>
  </data>
  <data name="InputLeft" xml:space="preserve">
    <value>入力画像（左）</value>
  </data>
  <data name="InputRight" xml:space="preserve">
    <value>入力画像（右）</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>出力</value>
  </data>
  <data name="OutputFormat" xml:space="preserve">
    <value>出力形式:</value>
  </data>
  <data name="SubtractAbsolute" xml:space="preserve">
    <value>絶対値計算</value>
  </data>
  <data name="Thresholding" xml:space="preserve">
    <value>2値化</value>
  </data>
  <data name="ThresholdingMaxValue" xml:space="preserve">
    <value>最大値:</value>
  </data>
  <data name="ThresholdValue" xml:space="preserve">
    <value>閾値:</value>
  </data>
  <data name="Preview" xml:space="preserve">
    <value>プレビュー</value>
  </data>
  <data name="ScalingDialogTitle" xml:space="preserve">
    <value>拡大縮小</value>
  </data>
  <data name="Height" xml:space="preserve">
    <value>高さ:</value>
  </data>
  <data name="KeepAspectRatio" xml:space="preserve">
    <value>縦横比を維持する</value>
  </data>
  <data name="Percent" xml:space="preserve">
    <value>パーセント</value>
  </data>
  <data name="Pixel" xml:space="preserve">
    <value>ピクセル</value>
  </data>
  <data name="Unit" xml:space="preserve">
    <value>単位:</value>
  </data>
  <data name="Width" xml:space="preserve">
    <value>幅:</value>
  </data>
  <data name="ReturnOriginalSize" xml:space="preserve">
    <value>元のサイズに戻す</value>
  </data>
  <data name="SaveDialogOpenText" xml:space="preserve">
    <value>保存...</value>
  </data>
  <data name="ScreenShotCapturing" xml:space="preserve">
    <value>キャプチャー</value>
  </data>
  <data name="ScreenShotCapturingMoving" xml:space="preserve">
    <value>動画</value>
  </data>
  <data name="ScreenShotCapturingStill" xml:space="preserve">
    <value>静止画</value>
  </data>
  <data name="ScreenShotDialogTitle" xml:space="preserve">
    <value>スクリーンショット</value>
  </data>
  <data name="ScreenShotShootButton" xml:space="preserve">
    <value>撮影する</value>
  </data>
  <data name="ScreenShotTarget" xml:space="preserve">
    <value>対象</value>
  </data>
  <data name="ScreenShotTargetDesktop" xml:space="preserve">
    <value>デスクトップ</value>
  </data>
  <data name="ScreenShotTargetEntireVirtualScreen" xml:space="preserve">
    <value>仮想スクリーン全体</value>
  </data>
  <data name="ScreenShotTargetScreen" xml:space="preserve">
    <value>スクリーン</value>
  </data>
  <data name="ScreenShotTargetScreenLabel" xml:space="preserve">
    <value>スクリーン:</value>
  </data>
  <data name="ScreenShotTargetWindow" xml:space="preserve">
    <value>ウィンドウ</value>
  </data>
  <data name="ScreenShotTargetWindowOnlyClientArea" xml:space="preserve">
    <value>クライアント領域のみ</value>
  </data>
  <data name="ScreenShotTargetWindowProcessLabel" xml:space="preserve">
    <value>プロセス:</value>
  </data>
  <data name="ScreenShotPreview" xml:space="preserve">
    <value>プレビュー</value>
  </data>
  <data name="MultiplicationDialogTitle" xml:space="preserve">
    <value>乗算</value>
  </data>
  <data name="ScaleFactor" xml:space="preserve">
    <value>スケールファクタ：</value>
  </data>
  <data name="ColorConversion" xml:space="preserve">
    <value>色空間変換</value>
  </data>
  <data name="ColorConversionDialogTitle" xml:space="preserve">
    <value>色空間変換</value>
  </data>
  <data name="ColorConversionType" xml:space="preserve">
    <value>変換方法：</value>
  </data>
  <data name="TargetImageInformation" xml:space="preserve">
    <value>対象画像の情報</value>
  </data>
  <data name="ChannelExtractionDialogTitle" xml:space="preserve">
    <value>チャンネルの抽出</value>
  </data>
  <data name="LabelChannel0" xml:space="preserve">
    <value>チャンネル 0</value>
  </data>
  <data name="LabelChannel1" xml:space="preserve">
    <value>チャンネル 1</value>
  </data>
  <data name="LabelChannel2" xml:space="preserve">
    <value>チャンネル 2</value>
  </data>
  <data name="LabelChannel3" xml:space="preserve">
    <value>チャンネル 3</value>
  </data>
  <data name="LabelTarget" xml:space="preserve">
    <value>対象画像：</value>
  </data>
</root>